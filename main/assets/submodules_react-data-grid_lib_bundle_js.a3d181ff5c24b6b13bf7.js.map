{"version":3,"file":"submodules_react-data-grid_lib_bundle_js.a3d181ff5c24b6b13bf7.js","mappings":"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","sources":["webpack://metanno/./submodules/react-data-grid/node_modules/style-inject/dist/style-inject.es.js","webpack://metanno/./submodules/react-data-grid/src/style/cell.ts","webpack://metanno/./submodules/react-data-grid/src/style/core.ts","webpack://metanno/./submodules/react-data-grid/src/style/row.ts","webpack://metanno/./submodules/react-data-grid/src/hooks/useLayoutEffect.ts","webpack://metanno/./submodules/react-data-grid/src/hooks/useActiveElement.ts","webpack://metanno/./submodules/react-data-grid/src/hooks/useFocusRef.ts","webpack://metanno/./submodules/react-data-grid/src/formatters/SelectCellFormatter.tsx","webpack://metanno/./submodules/react-data-grid/src/formatters/ValueFormatter.tsx","webpack://metanno/./submodules/react-data-grid/src/formatters/ToggleGroupFormatter.tsx","webpack://metanno/./submodules/react-data-grid/src/hooks/useRowSelection.ts","webpack://metanno/./submodules/react-data-grid/src/utils/colSpanUtils.ts","webpack://metanno/./submodules/react-data-grid/src/utils/domUtils.ts","webpack://metanno/./submodules/react-data-grid/src/utils/keyboardUtils.ts","webpack://metanno/./submodules/react-data-grid/src/utils/selectedCellUtils.ts","webpack://metanno/./submodules/react-data-grid/src/utils/index.ts","webpack://metanno/./submodules/react-data-grid/src/Columns.tsx","webpack://metanno/./submodules/react-data-grid/src/hooks/useCalculatedColumns.ts","webpack://metanno/./submodules/react-data-grid/src/hooks/useGridDimensions.ts","webpack://metanno/./submodules/react-data-grid/src/hooks/useLatestFunc.ts","webpack://metanno/./submodules/react-data-grid/src/hooks/useRovingCellRef.ts","webpack://metanno/./submodules/react-data-grid/src/hooks/useRovingRowRef.ts","webpack://metanno/./submodules/react-data-grid/src/hooks/useViewportColumns.ts","webpack://metanno/./submodules/react-data-grid/src/hooks/useViewportRows.ts","webpack://metanno/./submodules/react-data-grid/src/headerCells/SortableHeaderCell.tsx","webpack://metanno/./submodules/react-data-grid/src/HeaderCell.tsx","webpack://metanno/./submodules/react-data-grid/src/HeaderRow.tsx","webpack://metanno/./submodules/react-data-grid/src/Cell.tsx","webpack://metanno/./submodules/react-data-grid/src/Row.tsx","webpack://metanno/./submodules/react-data-grid/src/GroupCell.tsx","webpack://metanno/./submodules/react-data-grid/src/GroupRow.tsx","webpack://metanno/./submodules/react-data-grid/src/SummaryCell.tsx","webpack://metanno/./submodules/react-data-grid/src/SummaryRow.tsx","webpack://metanno/./submodules/react-data-grid/src/EditCell.tsx","webpack://metanno/./submodules/react-data-grid/src/DragHandle.tsx","webpack://metanno/./submodules/react-data-grid/src/DataGrid.tsx","webpack://metanno/./submodules/react-data-grid/src/editors/TextEditor.tsx","webpack://metanno/./submodules/react-data-grid/node_modules/@babel/runtime/helpers/esm/extends.js","webpack://metanno/./submodules/react-data-grid/node_modules/clsx/dist/clsx.m.js"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import { css } from '@linaria/core';\n\nexport const cell = css`\n  contain: strict;\n  contain: size layout style paint;\n  padding: 0 8px;\n  border-right: 1px solid var(--border-color);\n  border-bottom: 1px solid var(--border-color);\n  background-color: inherit;\n\n  white-space: nowrap;\n  overflow: hidden;\n  overflow: clip;\n  text-overflow: ellipsis;\n  outline: none;\n\n  &[aria-selected='true'] {\n    box-shadow: inset 0 0 0 2px var(--selection-color);\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\nconst cellFrozen = css`\n  position: sticky;\n  /* Should have a higher value than 0 to show up above unfrozen cells */\n  z-index: 1;\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n\nexport const cellFrozenLast = css`\n  box-shadow: 2px 0 5px -2px rgba(136, 136, 136, 0.3);\n`;\n\nexport const cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\n","import { css } from '@linaria/core';\nimport { row } from './row';\n\nconst lightTheme = `\n  --color: #000;\n  --border-color: #ddd;\n  --summary-border-color: #aaa;\n  --background-color: hsl(0deg 0% 100%);\n  --header-background-color: hsl(0deg 0% 97.5%);\n  --row-hover-background-color: hsl(0deg 0% 96%);\n  --row-selected-background-color: hsl(207deg 76% 92%);\n  --row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --checkbox-color: hsl(207deg 100% 29%);\n  --checkbox-focus-color: hsl(207deg 100% 69%);\n  --checkbox-disabled-border-color: #ccc;\n  --checkbox-disabled-background-color: #ddd;\n`;\n\nconst darkTheme = `\n  --color: #ddd;\n  --border-color: #444;\n  --summary-border-color: #555;\n  --background-color: hsl(0deg 0% 13%);\n  --header-background-color: hsl(0deg 0% 10.5%);\n  --row-hover-background-color: hsl(0deg 0% 9%);\n  --row-selected-background-color: hsl(207deg 76% 42%);\n  --row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --checkbox-color: hsl(207deg 100% 79%);\n  --checkbox-focus-color: hsl(207deg 100% 89%);\n  --checkbox-disabled-border-color: #000;\n  --checkbox-disabled-background-color: #333;\n`;\n\nconst root = css`\n  @media (prefers-color-scheme: light) {\n     & {\n      ${lightTheme}\n    }\n  }\n  @media (prefers-color-scheme: dark) {\n     & {\n      ${darkTheme}\n    }\n  }\n  \n  &.rdg-dark, :root[data-theme='dark'] & {\n    --color-scheme: dark;\n    ${darkTheme}\n  }\n\n  &.rdg-light, :root[data-theme='light'] & {\n    --color-scheme: light;\n    ${lightTheme}\n  }\n\n  \n  --selection-color: #66afe9;\n  --font-size: 1rem;\n\n  color-scheme: var(--color-scheme, light dark);\n\n  /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n  /* We set a stacking context so internal elements don't render on top of external components. */\n  contain: strict;\n  contain: size layout style paint;\n  content-visibility: auto;\n  height: 350px;\n  border: 1px solid var(--border-color);\n  box-sizing: border-box;\n  overflow: auto;\n  user-select: none;\n  background-color: var(--background-color);\n  color: var(--color);\n  font-size: var(--font-size);\n  direction: ltr;\n\n  /* set stacking context in safari */\n  @supports not (contain: strict) {\n    position: relative;\n    z-index: 0;\n  }\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: inherit;\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  &.${row} {\n    cursor: move;\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n","import { css } from '@linaria/core';\n\nexport const row = css`\n  contain: strict;\n  contain: size layout style paint;\n  display: grid;\n  grid-template-rows: var(--row-height);\n  grid-template-columns: var(--template-columns);\n  position: absolute;\n  left: 0;\n  width: var(--row-width);\n  height: var(--row-height); /* needed on Firefox */\n  line-height: var(--row-height);\n  background-color: var(--background-color);\n\n  &:hover {\n    background-color: var(--row-hover-background-color);\n  }\n\n  &[aria-selected='true'] {\n    background-color: var(--row-selected-background-color);\n\n    &:hover {\n      background-color: var(--row-selected-hover-background-color);\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n","// eslint-disable-next-line no-restricted-imports\nimport { useEffect, useLayoutEffect as useOriginalLayoutEffect } from 'react';\n\n// Silence silly warning\n// https://reactjs.org/link/uselayouteffect-ssr\nexport const useLayoutEffect = typeof window === 'undefined' ? useEffect : useOriginalLayoutEffect;\n","import React, {RefObject, useEffect, useRef} from \"react\";\n\nexport const ActiveContext = React.createContext({current: false});\nActiveContext.displayName = 'ActiveContext';\n\nexport const useActiveElement = (gridRef: RefObject<HTMLElement>) => {\n    const activeRef = useRef(document.activeElement === gridRef.current);\n\n    const handleFocusIn = () => {\n        activeRef.current = true;\n    }\n\n    const handleFocusOut = () => {\n        activeRef.current = true;\n    }\n\n    useEffect(() => {\n        const gridElement = gridRef.current;\n        if (!gridElement)\n            return\n        gridElement.addEventListener('focusin', handleFocusIn);\n        gridElement.addEventListener('focusout', handleFocusOut);\n        return () => {\n            gridElement.removeEventListener('focusin', handleFocusIn);\n            gridElement.removeEventListener('focusout', handleFocusOut);\n        };\n    }, []);\n\n    return activeRef;\n}","import { useContext, useRef } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\nimport {ActiveContext} from \"./useActiveElement\";\n\nexport function useFocusRef<T extends HTMLOrSVGElement>(isSelected: boolean) {\n  const ref = useRef<T>(null);\n  const activeRef = useContext(ActiveContext);\n\n  useLayoutEffect(() => {\n    if (!isSelected) return;\n    if (activeRef.current)\n      ref.current?.focus({ preventScroll: true });\n  }, [isSelected]);\n\n  return {\n    ref,\n    tabIndex: isSelected ? 0 : -1\n  };\n}\n","import React from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nconst checkboxLabel = css`\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  inset: 0;\n  margin-right: 1px; /* align checkbox in row group cell */\n`;\n\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\n\nconst checkboxInput = css`\n  all: unset;\n  width: 0;\n  margin: 0;\n`;\n\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\n\nconst checkbox = css`\n  content: '';\n  width: 20px;\n  height: 20px;\n  border: 2px solid var(--border-color);\n  background-color: var(--background-color);\n\n  .${checkboxInput}:checked + & {\n    background-color: var(--checkbox-color);\n    box-shadow: inset 0px 0px 0px 4px var(--background-color);\n  }\n\n  .${checkboxInput}:focus + & {\n    border-color: var(--checkbox-focus-color);\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\n\nconst checkboxLabelDisabled = css`\n  cursor: default;\n\n  .${checkbox} {\n    border-color: var(--checkbox-disabled-border-color);\n    background-color: var(--checkbox-disabled-background-color);\n  }\n`;\n\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\ntype SharedInputProps = Pick<\n  React.InputHTMLAttributes<HTMLInputElement>,\n  'disabled' | 'onClick' | 'aria-label' | 'aria-labelledby'\n>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  isCellSelected: boolean;\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  isCellSelected,\n  disabled,\n  onClick,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const { ref, tabIndex } = useFocusRef<HTMLInputElement>(isCellSelected);\n\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label className={clsx(checkboxLabelClassname, { [checkboxLabelDisabledClassname]: disabled })}>\n      <input\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledBy}\n        ref={ref}\n        type=\"checkbox\"\n        tabIndex={tabIndex}\n        className={checkboxInputClassname}\n        disabled={disabled}\n        checked={value}\n        onChange={handleChange}\n        onClick={onClick}\n      />\n      <div className={checkboxClassname} />\n    </label>\n  );\n}\n","import React from 'react';\nimport type { FormatterProps } from '../types';\n\nexport function ValueFormatter<R, SR>(props: FormatterProps<R, SR>) {\n  try {\n    return <>{props.row[props.column.key as keyof R]}</>;\n  } catch {\n    return null;\n  }\n}\n","import React from 'react';\nimport { css } from '@linaria/core';\nimport type { GroupFormatterProps } from '../types';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nconst groupCellContent = css`\n  outline: none;\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  margin-left: 4px;\n  stroke: currentColor;\n  stroke-width: 1.5px;\n  fill: transparent;\n  vertical-align: middle;\n\n  > path {\n    transition: d 0.1s;\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function ToggleGroupFormatter<R, SR>({\n  groupKey,\n  isExpanded,\n  isCellSelected,\n  toggleGroup\n}: GroupFormatterProps<R, SR>) {\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    // @ts-ignore\n    <span\n      ref={ref}\n      className={groupCellContentClassname}\n      tabIndex={tabIndex}\n      onKeyDown={handleKeyDown}\n    >\n      {groupKey}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname} aria-hidden>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","import { createContext, useContext } from 'react';\nimport type { SelectRowEvent } from '../types';\n\nconst RowSelectionContext = createContext<boolean | undefined>(undefined);\nRowSelectionContext.displayName = 'RowSelectionContext';\n\nexport const RowSelectionProvider = RowSelectionContext.Provider;\n\nconst RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\nRowSelectionChangeContext.displayName = 'RowSelectionChangeContext';\n\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nexport function useRowSelection<R>(): [boolean, (selectRowEvent: SelectRowEvent<R>) => void] {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\n","import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","export function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return target.matches(\n      '.rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child'\n    );\n  }\n  return false;\n}\n","import type { CalculatedColumn, Position, GroupRow, CellNavigationMode, Maybe } from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows,\n  isGroupRow\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return !isGroupRow(row) && isCellEditable(column, row);\n}\n\nexport function isCellEditable<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.editor != null &&\n    !column.rowGroup &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  summaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function getSelectedCellColSpan<R, SR>({\n  rows,\n  summaryRows,\n  rowIdx,\n  lastFrozenColumnIndex,\n  column,\n  isGroupRow\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'summaryRows' | 'isGroupRow' | 'lastFrozenColumnIndex'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  if (rowIdx === -1) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    if (!isGroupRow(row)) {\n      return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    }\n    return undefined;\n  }\n\n  if (summaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: summaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  summaryRows,\n  minRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds,\n  isGroupRow\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n\n  const setColSpan = (moveRight: boolean) => {\n    if (nextRowIdx >= 0 && nextRowIdx < rows.length) {\n      const row = rows[nextRowIdx];\n      if (isGroupRow(row)) return;\n    }\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        summaryRows,\n        rowIdx: nextRowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveRight ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(nextIdx - currentIdx > 0);\n  }\n\n  if (cellNavigationMode !== 'NONE') {\n    const columnsCount = columns.length;\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isLastRow = nextRowIdx === maxRowIdx;\n        if (!isLastRow) {\n          nextIdx = 0;\n          nextRowIdx += 1;\n        }\n      } else {\n        nextIdx = 0;\n      }\n    } else if (isBeforeFirstColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isFirstRow = nextRowIdx === minRowIdx;\n        if (!isFirstRow) {\n          nextRowIdx -= 1;\n          nextIdx = columnsCount - 1;\n        }\n      } else {\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  cellNavigationMode: CellNavigationMode;\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  cellNavigationMode,\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // When the cellNavigationMode is 'none' or 'changeRow', you can exit the grid if you're at the first or last cell of the grid\n  // When the cellNavigationMode is 'loopOverRow', there is no logical exit point so you can't exit the grid\n  if (cellNavigationMode === 'NONE' || cellNavigationMode === 'CHANGE_ROW') {\n    const atLastCellInRow = idx === maxColIdx;\n    const atFirstCellInRow = idx === 0;\n    const atLastRow = rowIdx === maxRowIdx;\n    const atFirstRow = rowIdx === minRowIdx;\n\n    return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n  }\n\n  return false;\n}\n","import clsx from 'clsx';\n\nimport type { CalculatedColumn } from '../types';\nimport { cellClassname, cellFrozenClassname, cellFrozenLastClassname } from '../style';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './keyboardUtils';\nexport * from './selectedCellUtils';\n\nexport const { min, max, floor, sign } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: unknown\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan?: number\n): React.CSSProperties {\n  return {\n    gridColumnStart: column.idx + 1,\n    gridColumnEnd: colSpan !== undefined ? `span ${colSpan}` : undefined,\n    left: column.frozen ? `var(--frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen,\n      [cellFrozenLastClassname]: column.isLastFrozenColumn\n    },\n    ...extraClasses\n  );\n}\n","import React from 'react';\nimport { SelectCellFormatter } from './formatters';\nimport { useRowSelection } from './hooks/useRowSelection';\nimport type { Column, FormatterProps, GroupFormatterProps } from './types';\nimport { stopPropagation } from './utils';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\nfunction SelectFormatter(props: FormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onClick={stopPropagation}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: GroupFormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick: false });\n      }}\n      // Stop propagation to prevent row selection\n      onClick={stopPropagation}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  headerRenderer(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select All\"\n        isCellSelected={props.isCellSelected}\n        value={props.allRowsSelected}\n        onChange={props.onAllRowsSelectionChange}\n        // Stop propagation to prevent row selection\n        onClick={stopPropagation}\n      />\n    );\n  },\n  formatter: SelectFormatter,\n  groupFormatter: SelectGroupFormatter\n};\n","import { useMemo } from 'react';\n\nimport type { CalculatedColumn, Column, Maybe } from '../types';\nimport type { DataGridProps } from '../DataGrid';\nimport { ValueFormatter, ToggleGroupFormatter } from '../formatters';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport { floor, max, min } from '../utils';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\ninterface CalculatedColumnsArgs<R, SR> extends Pick<DataGridProps<R, SR>, 'defaultColumnOptions'> {\n  rawColumns: readonly Column<R, SR>[];\n  rawGroupBy: Maybe<readonly string[]>;\n  viewportWidth: number;\n  scrollLeft: number;\n  columnWidths: ReadonlyMap<string, number>;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  columnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  rawGroupBy,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const minColumnWidth = defaultColumnOptions?.minWidth ?? 80;\n  const defaultFormatter = defaultColumnOptions?.formatter ?? ValueFormatter;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, groupBy } = useMemo((): {\n    columns: readonly CalculatedColumn<R, SR>[];\n    colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    lastFrozenColumnIndex: number;\n    groupBy: readonly string[];\n  } => {\n    // Filter rawGroupBy and ignore keys that do not match the columns prop\n    const groupBy: string[] = [];\n    let lastFrozenColumnIndex = -1;\n\n    const columns = rawColumns.map((rawColumn) => {\n      const rowGroup = rawGroupBy?.includes(rawColumn.key) ?? false;\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      const frozen = rowGroup || rawColumn.frozen || false;\n\n      const column: Mutable<CalculatedColumn<R, SR>> = {\n        ...rawColumn,\n        idx: 0,\n        frozen,\n        isLastFrozenColumn: false,\n        rowGroup,\n        sortable: rawColumn.sortable ?? defaultSortable,\n        resizable: rawColumn.resizable ?? defaultResizable,\n        formatter: rawColumn.formatter ?? defaultFormatter\n      };\n\n      if (rowGroup) {\n        column.groupFormatter ??= ToggleGroupFormatter;\n      }\n\n      if (frozen) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy?.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy?.includes(bKey)) return 1;\n\n      // Sort frozen columns third:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n\n      if (column.rowGroup) {\n        groupBy.push(column.key);\n      }\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      groupBy\n    };\n  }, [rawColumns, defaultFormatter, defaultResizable, defaultSortable, rawGroupBy]);\n\n  const { layoutCssVars, totalColumnWidth, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalColumnWidth: number;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalColumnWidth = 0;\n    let totalFrozenColumnWidth = 0;\n    let templateColumns = '';\n    let allocatedWidth = 0;\n    let unassignedColumnsCount = 0;\n\n    for (const column of columns) {\n      let width = getSpecifiedWidth(column, columnWidths, viewportWidth);\n\n      if (width === undefined) {\n        unassignedColumnsCount++;\n      } else {\n        width = clampColumnWidth(width, column, minColumnWidth);\n        allocatedWidth += width;\n        columnMetrics.set(column, { width, left: 0 });\n      }\n    }\n\n    const unallocatedWidth = viewportWidth - allocatedWidth;\n    const unallocatedColumnWidth = unallocatedWidth / unassignedColumnsCount;\n\n    for (const column of columns) {\n      let width: number;\n      if (columnMetrics.has(column)) {\n        const columnMetric = columnMetrics.get(column)!;\n        columnMetric.left = left;\n        ({ width } = columnMetric);\n      } else {\n        width = clampColumnWidth(unallocatedColumnWidth, column, minColumnWidth);\n        columnMetrics.set(column, { width, left });\n      }\n      totalColumnWidth += width;\n      left += width;\n      templateColumns += `${width}px `;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {\n      '--template-columns': templateColumns\n    };\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { layoutCssVars, totalColumnWidth, totalFrozenColumnWidth, columnMetrics };\n  }, [columnWidths, columns, viewportWidth, minColumnWidth, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    totalColumnWidth,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  };\n}\n\nfunction getSpecifiedWidth<R, SR>(\n  { key, width }: Column<R, SR>,\n  columnWidths: ReadonlyMap<string, number>,\n  viewportWidth: number\n): number | undefined {\n  if (columnWidths.has(key)) {\n    // Use the resized width if available\n    return columnWidths.get(key);\n  }\n  if (typeof width === 'number') {\n    return width;\n  }\n  if (typeof width === 'string' && /^\\d+%$/.test(width)) {\n    return floor((viewportWidth * parseInt(width, 10)) / 100);\n  }\n  return undefined;\n}\n\nfunction clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: Column<R, SR>,\n  minColumnWidth: number\n): number {\n  width = max(width, minWidth ?? minColumnWidth);\n\n  if (typeof maxWidth === 'number') {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n","import { useRef, useState } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useGridDimensions(): [\n  ref: React.RefObject<HTMLDivElement>,\n  width: number,\n  height: number\n] {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [gridWidth, setGridWidth] = useState(1);\n  const [gridHeight, setGridHeight] = useState(1);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jest/jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const resizeObserver = new ResizeObserver(() => {\n      // Get dimensions without scrollbars.\n      // The dimensions given by the callback entries in Firefox do not substract the scrollbar sizes.\n      const { clientWidth, clientHeight } = gridRef.current!;\n      // TODO: remove once fixed upstream\n      // we reduce width by 1px here to avoid layout issues in Chrome\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=1206298\n      setGridWidth(clientWidth - (devicePixelRatio % 1 === 0 ? 0 : 1));\n      setGridHeight(clientHeight);\n    });\n\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, gridWidth, gridHeight];\n}\n","import { useRef, useEffect, useCallback } from 'react';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends (...args: any[]) => any>(fn: T) {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  return useCallback((...args: Parameters<T>) => {\n    ref.current(...args);\n  }, []);\n}\n","import { useContext, useRef, useState } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\nimport {ActiveContext} from \"./useActiveElement\";\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingCellRef(isSelected: boolean) {\n  const ref = useRef<HTMLDivElement>(null);\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const isChildFocused = useRef(false);\n  const [, forceRender] = useState<unknown>({});\n  const activeRef = useContext(ActiveContext);\n\n  useLayoutEffect(() => {\n    if (!isSelected) {\n      isChildFocused.current = false;\n      return;\n    }\n\n    if (isChildFocused.current) {\n      // When the child is focused, we need to rerender\n      // the cell again so tabIndex is updated to -1\n      forceRender({});\n      return;\n    }\n    if (activeRef.current)\n      ref.current?.focus();\n  }, [isSelected]);\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== ref.current) {\n      isChildFocused.current = true;\n    }\n  }\n\n  const isFocused = isSelected && !isChildFocused.current;\n\n  return {\n    ref,\n    tabIndex: isFocused ? 0 : -1,\n    onFocus\n  };\n}\n","import { css } from '@linaria/core';\n\nimport { cell } from '../style';\n// import { useFocusRef } from './useFocusRef';\n\nconst rowSelected = css`\n  outline: none;\n\n  &::after {\n    content: '';\n    position: absolute;\n    inset: 0;\n    box-shadow: inset 0 0 0 2px var(--selection-color);\n    pointer-events: none;\n    z-index: 2;\n  }\n\n  > .${cell}:first-child {\n    /* preserve left border on the first frozen cell after scrolling to the right */\n    box-shadow: inset 2px 0 0 0 var(--selection-color);\n  }\n`;\n\nexport const rowSelectedClassname = `rdg-row-selected ${rowSelected}`;\n\nexport function useRovingRowRef(selectedCellIdx: number | undefined) {\n  const isSelected = selectedCellIdx === -1;\n  // const { ref, tabIndex } = useFocusRef<HTMLDivElement>(isSelected);\n\n  return {\n    // ref,\n    // tabIndex,\n    className: isSelected ? rowSelectedClassname : undefined\n  };\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, GroupRow, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  summaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  summaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx,\n  isGroupRow\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (isGroupRow(row)) continue;\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (summaryRows != null) {\n        for (const row of summaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    summaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns,\n    isGroupRow\n  ]);\n\n  return useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\n","import { useMemo } from 'react';\nimport { floor, max, min } from '../utils';\nimport type { GroupRow, Maybe, RowHeightArgs } from '../types';\n\ntype GroupByDictionary<TRow> = Record<\n  string,\n  {\n    readonly childRows: readonly TRow[];\n    readonly childGroups: readonly TRow[] | Readonly<GroupByDictionary<TRow>>;\n    readonly startRowIndex: number;\n  }\n>;\n\ninterface ViewportRowsArgs<R> {\n  rawRows: readonly R[];\n  rowHeight: number | ((args: RowHeightArgs<R>) => number);\n  clientHeight: number;\n  scrollTop: number;\n  groupBy: readonly string[];\n  rowGrouper: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds: Maybe<ReadonlySet<unknown>>;\n  enableVirtualization: boolean;\n}\n\n// TODO: https://github.com/microsoft/TypeScript/issues/41808\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport function useViewportRows<R>({\n  rawRows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  groupBy,\n  rowGrouper,\n  expandedGroupIds,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || rowGrouper == null) return [undefined, rawRows.length];\n\n    const groupRows = (\n      rows: readonly R[],\n      [groupByKey, ...remainingGroupByKeys]: readonly string[],\n      startRowIndex: number\n    ): [Readonly<GroupByDictionary<R>>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] =\n          remainingGroupByKeys.length === 0\n            ? [childRows, childRows.length]\n            : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo((): [\n    ReadonlyArray<R | GroupRow<R>>,\n    (row: R | GroupRow<R>) => row is GroupRow<R>\n  ] => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (\n      rows: GroupByDictionary<R> | readonly R[],\n      parentId: string | undefined,\n      level: number\n    ): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds?.has(id) ?? false;\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const { totalRowHeight, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row: R | GroupRow<R>) => {\n      const currentRowHeight = isGroupRow(row)\n        ? rowHeight({ type: 'GROUP', row })\n        : rowHeight({ type: 'ROW', row });\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [isGroupRow, rowHeight, rows]);\n\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n","import React from 'react';\nimport { css } from '@linaria/core';\nimport { useFocusRef } from '../hooks';\nimport type { HeaderRendererProps } from '../types';\n\nconst headerSortCell = css`\n  cursor: pointer;\n  display: flex;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst headerSortCellClassname = `rdg-header-sort-cell ${headerSortCell}`;\n\nconst headerSortName = css`\n  flex-grow: 1;\n  overflow: hidden;\n  overflow: clip;\n  text-overflow: ellipsis;\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nconst arrow = css`\n  fill: currentColor;\n\n  > path {\n    transition: d 0.1s;\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  HeaderRendererProps<R, SR>,\n  'sortDirection' | 'onSort' | 'priority' | 'isCellSelected'\n>;\n\ninterface Props<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nexport default function SortableHeaderCell<R, SR>({\n  onSort,\n  sortDirection,\n  priority,\n  children,\n  isCellSelected\n}: Props<R, SR>) {\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      // stop propagation to prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLSpanElement>) {\n    onSort(event.ctrlKey || event.metaKey);\n  }\n\n  return (\n    <span\n      ref={ref}\n      tabIndex={tabIndex}\n      className={headerSortCellClassname}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n    >\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>\n        {sortDirection !== undefined && (\n          <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n            <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n          </svg>\n        )}\n        {priority}\n      </span>\n    </span>\n  );\n}\n","import React from 'react';\nimport { css } from '@linaria/core';\n\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport SortableHeaderCell from './headerCells/SortableHeaderCell';\nimport { getCellStyle, getCellClassname } from './utils';\nimport { useRovingCellRef } from './hooks';\n\nconst cellResizable = css`\n  touch-action: none;\n\n  &::after {\n    content: '';\n    cursor: col-resize;\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    width: 10px;\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'allRowsSelected'\n  | 'onAllRowsSelectionChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'shouldFocusGrid'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  isCellSelected: boolean;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  onColumnResize,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid\n}: HeaderCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellResizableClassname]: column.resizable\n  });\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const { currentTarget, pointerId } = event;\n    const { right } = currentTarget.getBoundingClientRect();\n    const offset = right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      const width = event.clientX + offset - currentTarget.getBoundingClientRect().left;\n      if (width > 0) {\n        onColumnResize(column, width);\n      }\n    }\n\n    function onLostPointerCapture() {\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst && sortDirection === 'DESC') ||\n        (!sortDescendingFirst && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick() {\n    selectCell(column.idx);\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell(0);\n    }\n  }\n\n  function getCell() {\n    if (column.headerRenderer) {\n      return (\n        <column.headerRenderer\n          column={column}\n          sortDirection={sortDirection}\n          priority={priority}\n          onSort={onSort}\n          allRowsSelected={allRowsSelected}\n          onAllRowsSelectionChange={onAllRowsSelectionChange}\n          isCellSelected={isCellSelected}\n        />\n      );\n    }\n\n    if (column.sortable) {\n      return (\n        <SortableHeaderCell\n          onSort={onSort}\n          sortDirection={sortDirection}\n          priority={priority}\n          isCellSelected={isCellSelected}\n        >\n          {column.name}\n        </SortableHeaderCell>\n      );\n    }\n\n    return column.name;\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      aria-sort={ariaSort}\n      aria-colspan={colSpan}\n      ref={ref}\n      // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n      tabIndex={shouldFocusGrid ? 0 : tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onFocus={handleFocus}\n      onClick={onClick}\n      onPointerDown={column.resizable ? onPointerDown : undefined}\n    >\n      {getCell()}\n    </div>\n  );\n}\n","import React from 'react';\nimport { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport HeaderCell from './HeaderCell';\nimport type { CalculatedColumn } from './types';\nimport { getColSpan } from './utils';\nimport type { DataGridProps } from './DataGrid';\nimport { useRovingRowRef } from './hooks';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  allRowsSelected: boolean;\n  onAllRowsSelectionChange: (checked: boolean) => void;\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n  selectCell: (columnIdx: number) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n}\n\nconst headerRow = css`\n  contain: strict;\n  contain: size layout style paint;\n  display: grid;\n  grid-template-columns: var(--template-columns);\n  grid-template-rows: var(--header-row-height);\n  height: var(--header-row-height); /* needed on Firefox */\n  line-height: var(--header-row-height);\n  width: var(--row-width);\n  position: sticky;\n  top: 0;\n  background-color: var(--header-background-color);\n  font-weight: bold;\n  z-index: 3;\n  outline: none;\n\n  &[aria-selected='true'] {\n    box-shadow: inset 0 0 0 2px var(--selection-color);\n  }\n`;\n\nconst headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  columns,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid\n}: HeaderRowProps<R, SR, K>) {\n  const { /*ref, tabIndex, */className } = useRovingRowRef(selectedCellIdx);\n\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        allRowsSelected={allRowsSelected}\n        onAllRowsSelectionChange={onAllRowsSelectionChange}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      // ref={ref}\n      tabIndex={selectedCellIdx === -1 ? 0 : -1}\n      className={clsx(headerRowClassname, className)}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => JSX.Element;\n","import React from 'react';\nimport { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { getCellStyle, getCellClassname, isCellEditable } from './utils';\nimport type { CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\nconst cellCopied = css`\n  background-color: #ccccff;\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  background-color: #ccccff;\n\n  &.${cellCopied} {\n    background-color: #9999ff;\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  rowIdx,\n  dragHandle,\n  onRowClick,\n  onRowDoubleClick,\n  onRowChange,\n  selectCell,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    {\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  function selectCellWrapper(openEditor?: boolean | null) {\n    selectCell(row, column, openEditor);\n  }\n\n  function handleClick() {\n    selectCellWrapper(column.editorOptions?.editOnClick);\n    onRowClick?.(row, column);\n  }\n\n  function handleContextMenu() {\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick() {\n    selectCellWrapper(true);\n    onRowDoubleClick?.(row, column);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      aria-colspan={colSpan}\n      aria-readonly={!isCellEditable(column, row) || undefined}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      {...props}\n    >\n      {!column.rowGroup && (\n        <>\n          <column.formatter\n            column={column}\n            row={row}\n            rowIdx={rowIdx}\n            isCellSelected={isCellSelected}\n            onRowChange={onRowChange}\n          />\n          {dragHandle}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => JSX.Element;\n","import React, { forwardRef } from 'react';\nimport type { RefAttributes, CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport Cell from './Cell';\nimport { RowSelectionProvider, useLatestFunc/*, useCombinedRefs*/, useRovingRowRef } from './hooks';\nimport { getColSpan } from './utils';\nimport { rowClassname } from './style';\nimport type { RowRendererProps } from './types';\n\nfunction Row<R, SR>(\n  {\n    className,\n    rowIdx,\n    selectedCellIdx,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    selectedCellDragHandle,\n    onRowClick,\n    onRowDoubleClick,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    top,\n    height,\n    onRowChange,\n    selectCell,\n    ...props\n  }: RowRendererProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  // const { ref: rowRef, tabIndex, className: rovingClassName } = useRovingRowRef(selectedCellIdx);\n  const { className: rovingClassName } = useRovingRowRef(selectedCellIdx);\n\n  const handleRowChange = useLatestFunc((newRow: R) => {\n    onRowChange(rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    rovingClassName,\n    rowClass?.(row),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        <Cell\n          key={column.key}\n          column={column}\n          colSpan={colSpan}\n          row={row}\n          rowIdx={rowIdx}\n          isCopied={copiedCellIdx === idx}\n          isDraggedOver={draggedOverCellIdx === idx}\n          isCellSelected={isCellSelected}\n          dragHandle={isCellSelected ? selectedCellDragHandle : undefined}\n          onRowClick={onRowClick}\n          onRowDoubleClick={onRowDoubleClick}\n          onRowChange={handleRowChange}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        // ref={useCombinedRefs(ref}\n        tabIndex={selectedCellIdx === -1 ? 0 : -1}\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={\n          {\n            top,\n            '--row-height': `${height}px`\n          } as unknown as CSSProperties\n        }\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default Row as <R, SR>(props: RowRendererProps<R, SR>) => JSX.Element;\n\nexport const RowWithRef = forwardRef(Row) as <R, SR>(\n  props: RowRendererProps<R, SR> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n","import React from 'react';\nimport { memo } from 'react';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, GroupRow } from './types';\nimport type { GroupRowRendererProps } from './GroupRow';\nimport { useRovingCellRef } from './hooks';\n\ntype SharedGroupRowRendererProps<R, SR> = Pick<\n  GroupRowRendererProps<R, SR>,\n  'id' | 'groupKey' | 'childRows' | 'isExpanded' | 'toggleGroup'\n>;\n\ninterface GroupCellProps<R, SR> extends SharedGroupRowRendererProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  row: GroupRow<R>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      key={column.key}\n      className={getCellClassname(column)}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n      onFocus={onFocus}\n    >\n      {(!column.rowGroup || groupColumnIndex === column.idx) && column.groupFormatter && (\n        <column.groupFormatter\n          groupKey={groupKey}\n          childRows={childRows}\n          column={column}\n          row={row}\n          isExpanded={isExpanded}\n          isCellSelected={isCellSelected}\n          toggleGroup={toggleGroup}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import React from 'react';\nimport type { CSSProperties } from 'react';\nimport { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, cellFrozenLast, rowClassname } from './style';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport type { CalculatedColumn, GroupRow, Omit } from './types';\nimport { RowSelectionProvider, useRovingRowRef } from './hooks';\n\nexport interface GroupRowRendererProps<R, SR>\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  id: string;\n  groupKey: unknown;\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n  childRows: readonly R[];\n  rowIdx: number;\n  row: GroupRow<R>;\n  top: number;\n  height: number;\n  level: number;\n  selectedCellIdx: number | undefined;\n  isExpanded: boolean;\n  isRowSelected: boolean;\n  selectGroup: (rowIdx: number) => void;\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nconst groupRow = css`\n  &:not([aria-selected='true']) {\n    background-color: var(--header-background-color);\n  }\n\n  > .${cell}:not(:last-child):not(.${cellFrozenLast}) {\n    border-right: none;\n  }\n`;\n\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\n\nfunction GroupedRow<R, SR>({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  row,\n  top,\n  height,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  selectGroup,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  const { /*ref, tabIndex, */className } = useRovingRowRef(selectedCellIdx);\n\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function handleSelectGroup() {\n    selectGroup(rowIdx);\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        aria-level={level}\n        aria-expanded={isExpanded}\n        // ref={ref}\n        tabIndex={selectedCellIdx === -1 ? 0 : -1}\n        className={clsx(\n          rowClassname,\n          groupRowClassname,\n          `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n          className\n        )}\n        onClick={handleSelectGroup}\n        style={\n          {\n            top,\n            '--row-height': `${height}px`\n          } as unknown as CSSProperties\n        }\n        {...props}\n      >\n        {viewportColumns.map((column) => (\n          <GroupCell\n            key={column.key}\n            id={id}\n            groupKey={groupKey}\n            childRows={childRows}\n            isExpanded={isExpanded}\n            isCellSelected={selectedCellIdx === column.idx}\n            column={column}\n            row={row}\n            groupColumnIndex={idx}\n            toggleGroup={toggleGroup}\n          />\n        ))}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import React from 'react';\nimport { memo } from 'react';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\ninterface SharedCellRendererProps<R, SR>\n  extends Pick<CellRendererProps<R, SR>, 'column' | 'colSpan' | 'isCellSelected'> {\n  selectCell: (row: SR, column: CalculatedColumn<R, SR>) => void;\n}\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n  const { summaryFormatter: SummaryFormatter, summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onClick() {\n    selectCell(row, column);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={onClick}\n      onFocus={onFocus}\n    >\n      {SummaryFormatter && (\n        <SummaryFormatter column={column} row={row} isCellSelected={isCellSelected} />\n      )}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import React from 'react';\nimport { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, row, rowClassname } from './style';\nimport { getColSpan } from './utils';\nimport SummaryCell from './SummaryCell';\nimport type { CalculatedColumn, RowRendererProps } from './types';\nimport { useRovingRowRef } from './hooks';\n\ntype SharedRowRendererProps<R, SR> = Pick<RowRendererProps<R, SR>, 'viewportColumns' | 'rowIdx'>;\n\ninterface SummaryRowProps<R, SR> extends SharedRowRendererProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  bottom: number;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  selectCell: (row: SR, column: CalculatedColumn<R, SR>) => void;\n}\n\nconst summaryRow = css`\n  &.${row} {\n    position: sticky;\n    z-index: 3;\n    grid-template-rows: var(--summary-row-height);\n    height: var(--summary-row-height); /* needed on Firefox */\n    line-height: var(--summary-row-height);\n  }\n`;\n\nconst summaryRowBorderClassname = css`\n  & > .${cell} {\n    border-top: 2px solid var(--summary-border-color);\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  row,\n  viewportColumns,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const { /*ref, tabIndex, */className } = useRovingRowRef(selectedCellIdx);\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      // ref={ref}\n      tabIndex={selectedCellIdx === -1 ? 0 : -1}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        { [summaryRowBorderClassname]: rowIdx === 0 },\n        className\n      )}\n      style={{ bottom }}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","import React from 'react';\nimport { useEffect, useRef } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CellRendererProps, EditorProps } from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  &.rdg-cell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR> extends EditorProps<R, SR>, SharedCellRendererProps<R, SR> {}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  onRowChange,\n  onClose\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number | undefined>();\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onRowChange(row, rowIdx, true);\n  });\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current!);\n  }\n\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.renderFormatter && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onMouseDownCapture={commitOnOutsideClick ? cancelFrameRequest : undefined}\n    >\n      {column.editor != null && (\n        <>\n          <column.editor column={column} row={row} rowIdx={rowIdx} onRowChange={onRowChange} onClose={onClose} />\n          {column.editorOptions?.renderFormatter && (\n            <column.formatter column={column} row={row} rowIdx={rowIdx} isCellSelected onRowChange={onRowChange} />\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\nimport { css } from '@linaria/core';\n\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  cursor: move;\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  width: 8px;\n  height: 8px;\n  background-color: var(--selection-color);\n\n  &:hover {\n    width: 16px;\n    height: 16px;\n    border: 2px solid var(--selection-color);\n    background-color: var(--background-color);\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: React.MutableRefObject<number | undefined>;\n  isCellEditable: (position: Position) => boolean;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  rows,\n  columns,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const { rowIdx } = selectedPosition;\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(selectedPosition.rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  return (\n    <div\n      className={cellDragHandleClassname}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n","import React, { forwardRef, useState, useRef, useImperativeHandle, useCallback, useMemo } from 'react';\nimport type { Key, RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport { rootClassname, viewportDraggingClassname } from './style';\nimport {\n  useLayoutEffect,\n  useGridDimensions,\n  useCalculatedColumns,\n  useViewportColumns,\n  useViewportRows,\n  useLatestFunc,\n  RowSelectionChangeProvider\n} from './hooks';\nimport HeaderRow from './HeaderRow';\nimport Row from './Row';\nimport GroupRowRenderer from './GroupRow';\nimport SummaryRow from './SummaryRow';\nimport EditCell from './EditCell';\nimport DragHandle from './DragHandle';\nimport {\n  assertIsValidKeyGetter,\n  onEditorNavigation,\n  getNextSelectedCellPosition,\n  isSelectedCellEditable,\n  canExitGrid,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  getColSpan,\n  max,\n  sign,\n  getSelectedCellColSpan\n} from './utils';\n\nimport type {\n  CalculatedColumn,\n  Column,\n  Position,\n  RowRendererProps,\n  RowsChangeData,\n  SelectRowEvent,\n  FillEvent,\n  PasteEvent,\n  CellNavigationMode,\n  SortColumn,\n  RowHeightArgs,\n  Maybe\n} from './types';\nimport {ActiveContext, useActiveElement} from \"./hooks/useActiveElement\";\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState extends Position {\n  readonly mode: 'EDIT';\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  'formatter' | 'minWidth' | 'resizable' | 'sortable'\n>;\n\nconst initialPosition: SelectCellState = {\n  idx: -1,\n  rowIdx: -2,\n  mode: 'SELECT'\n};\n\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToColumn: (colIdx: number) => void;\n  scrollToRow: (rowIdx: number) => void;\n  selectCell: (position: Position, enableEditor?: Maybe<boolean>) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  'aria-label' | 'aria-labelledby' | 'aria-describedby' | 'className' | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   * Bottom horizontal scroll bar can move the row left / right. Or a customized row renderer can be used to disabled the scrolling support.\n   */\n  summaryRows?: Maybe<readonly SR[]>;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: Maybe<(row: R) => K>;\n  onRowsChange?: Maybe<(rows: R[], data: RowsChangeData<R, SR>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * The height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((args: RowHeightArgs<R>) => number)>;\n  /**\n   * The height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * The height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  onSelectedPositionChange: (position: SelectCellState | EditCellState) => void;\n  selectedPosition: SelectCellState | EditCellState;\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<K>) => void>;\n  /** Used for multi column sorting */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<R, SR>>;\n  groupBy?: Maybe<readonly string[]>;\n  rowGrouper?: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds?: Maybe<ReadonlySet<unknown>>;\n  onExpandedGroupIdsChange?: Maybe<(expandedGroupIds: Set<unknown>) => void>;\n  onFill?: Maybe<(event: FillEvent<R>) => R>;\n  onPaste?: Maybe<(event: PasteEvent<R>) => R>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a row is clicked */\n  onRowClick?: Maybe<(row: R, column: CalculatedColumn<R, SR>) => void>;\n  /** Function called whenever a row is double clicked */\n  onRowDoubleClick?: Maybe<(row: R, column: CalculatedColumn<R, SR>) => void>;\n  /** Called when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Called when a column is resized */\n  onColumnResize?: Maybe<(idx: number, width: number) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default 'NONE' */\n  cellNavigationMode?: Maybe<CellNavigationMode>;\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  rowRenderer?: (props: RowRendererProps<R, SR> & { key: Key }) => React.ReactElement | null;\n  noRowsFallback?: React.ReactNode;\n  rowClass?: Maybe<(row: R) => Maybe<string>>;\n  'data-testid'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR, K extends Key>(\n  {\n    // Grid and data Props\n    columns: rawColumns,\n    rows: rawRows,\n    summaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    selectedPosition=initialPosition,\n    onSelectedPositionChange,\n    // Event props\n    onRowClick,\n    onRowDoubleClick,\n    onScroll,\n    onColumnResize,\n    onFill,\n    onPaste,\n    // Toggles and modes\n    cellNavigationMode: rawCellNavigationMode,\n    enableVirtualization,\n    // Miscellaneous\n    rowRenderer,\n    noRowsFallback,\n    className,\n    style,\n    rowClass,\n    // ARIA\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'data-testid': testId\n  }: DataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  /**\n   * defaults\n   */\n  rowHeight ??= 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const RowRenderer = rowRenderer ?? Row;\n  const cellNavigationMode = rawCellNavigationMode ?? 'NONE';\n  enableVirtualization ??= true;\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidths, setColumnWidths] = useState<ReadonlyMap<string, number>>(() => new Map());\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n\n  /**\n   * refs\n   */\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n\n  /**\n   * computed values\n   */\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n  const headerRowsCount = 1;\n  const summaryRowsCount = summaryRows?.length ?? 0;\n  const clientHeight = gridHeight - headerRowHeight - summaryRowsCount * summaryRowHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isHeaderRowSelected = selectedPosition.rowIdx === -1;\n  const activeRef = useActiveElement(gridRef);\n\n  const allRowsSelected = useMemo((): boolean => {\n    // no rows to select = explicitely unchecked\n    const { length } = rawRows;\n    return (\n      length !== 0 &&\n      selectedRows != null &&\n      rowKeyGetter != null &&\n      selectedRows.size >= length &&\n      rawRows.every((row) => selectedRows.has(rowKeyGetter(row)))\n    );\n  }, [rawRows, selectedRows, rowKeyGetter]);\n\n  const {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    totalColumnWidth,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  } = useCalculatedColumns({\n    rawColumns,\n    columnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined,\n    enableVirtualization\n  });\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds,\n    enableVirtualization\n  });\n\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    summaryRows,\n    isGroupRow\n  });\n\n  const hasGroups = groupBy.length > 0 && typeof rowGrouper === 'function';\n  const minColIdx = hasGroups ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const minRowIdx = -1; // change it to 0?\n  const maxRowIdx = headerRowsCount + rows.length + summaryRowsCount - 2;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const selectRowLatest = useLatestFunc(selectRow);\n  const selectAllRowsLatest = useLatestFunc(selectAllRows);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectViewportCellLatest = useLatestFunc(\n    (row: R, column: CalculatedColumn<R, SR>, enableEditor: Maybe<boolean>) => {\n      const rowIdx = rows.indexOf(row);\n      selectCell({ rowIdx, idx: column.idx }, enableEditor);\n    }\n  );\n  const selectGroupLatest = useLatestFunc((rowIdx: number) => {\n    selectCell({ rowIdx, idx: -1 });\n  });\n  const selectHeaderCellLatest = useLatestFunc((idx: number) => {\n    selectCell({ rowIdx: -1, idx });\n  });\n  const selectSummaryCellLatest = useLatestFunc(\n    (summaryRow: SR, column: CalculatedColumn<R, SR>) => {\n      const rowIdx = summaryRows!.indexOf(summaryRow) + headerRowsCount + rows.length - 1;\n      selectCell({ rowIdx, idx: column.idx });\n    }\n  );\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      !selectedCellIsWithinSelectionBounds ||\n      selectedPosition === prevSelectedPosition.current ||\n      selectedPosition.mode === 'EDIT'\n    ) {\n      return;\n    }\n    prevSelectedPosition.current = selectedPosition;\n    scrollToCell(selectedPosition);\n  });\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToColumn(idx: number) {\n      scrollToCell({ idx });\n    },\n    scrollToRow(rowIdx: number) {\n      const { current } = gridRef;\n      if (!current) return;\n      current.scrollTo({\n        top: getRowTop(rowIdx),\n        behavior: 'smooth'\n      });\n    },\n    selectCell\n  }));\n\n  /**\n   * callbacks\n   */\n  const handleColumnResize = useCallback(\n    (column: CalculatedColumn<R, SR>, width: number) => {\n      setColumnWidths((columnWidths: Iterable<readonly [string, number]>) => {\n        const newColumnWidths = new Map(columnWidths);\n        newColumnWidths.set(column.key, width);\n        return newColumnWidths;\n      });\n\n      onColumnResize?.(column.idx, width);\n    },\n    [onColumnResize]\n  );\n\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * event handlers\n   */\n  function selectRow({ row, checked, isShiftClick }: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n    if (isGroupRow(row)) {\n      for (const childRow of row.childRows) {\n        const rowKey = rowKeyGetter(childRow);\n        if (checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          if (isGroupRow(row)) continue;\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function selectAllRows(checked: boolean) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n\n    for (const row of rawRows) {\n      const rowKey = rowKeyGetter(row);\n      if (checked) {\n        newSelectedRows.add(rowKey);\n      } else {\n        newSelectedRows.delete(rowKey);\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function toggleGroup(expandedGroupId: unknown) {\n    if (!onExpandedGroupIdsChange) return;\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(expandedGroupId)) {\n      newExpandedGroupIds.delete(expandedGroupId);\n    } else {\n      newExpandedGroupIds.add(expandedGroupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = hasGroups && event.target.matches('.rdg-row, .rdg-header-row');\n    if (!isCellEvent && !isRowEvent) return;\n\n    const { key, keyCode } = event;\n    const { rowIdx } = selectedPosition;\n\n    if (\n      selectedCellIsWithinViewportBounds &&\n      onPaste != null &&\n      isCtrlKeyHeldDown(event) &&\n      !isGroupRow(rows[rowIdx]) &&\n      selectedPosition.mode === 'SELECT'\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n\n      if (\n        isGroupRow(row) &&\n        selectedPosition.idx === -1 &&\n        // Collapse the current group row if it is focused and is in expanded state\n        ((key === 'ArrowLeft' && row.isExpanded) ||\n          // Expand the current group row if it is focused and is in collapsed state\n          (key === 'ArrowRight' && !row.isExpanded))\n      ) {\n        event.preventDefault(); // Prevents scrolling\n        toggleGroup(row.id);\n        return;\n      }\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        closeEditor();\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    setScrollTop(scrollTop);\n    setScrollLeft(scrollLeft);\n    onScroll?.(event);\n  }\n\n  function getRawRowIdx(rowIdx: number) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx] as R) : rowIdx;\n  }\n\n  function updateRow(rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    const rawRowIdx = getRawRowIdx(rowIdx);\n    if (row === rawRows[rawRowIdx]) return;\n    const updatedRows = [...rawRows];\n    updatedRows[rawRowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rawRowIdx],\n      column: columns[selectedPosition.idx]\n    });\n  }\n\n  function commitEditorChanges() {\n    if (\n      columns[selectedPosition.idx]?.editor == null ||\n      selectedPosition.mode === 'SELECT'\n    ) {\n      return;\n    }\n\n    updateRow(selectedPosition.rowIdx, rawRows[getRawRowIdx(selectedPosition.rowIdx)]);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    setCopiedCell({ row: rawRows[getRawRowIdx(rowIdx)], columnKey: columns[idx].key });\n  }\n\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const targetRow = rawRows[getRawRowIdx(rowIdx)];\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: columns[idx].key\n    });\n\n    updateRow(rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const { key, shiftKey } = event;\n\n    if (selectedPosition.mode === 'EDIT') {\n      if (key === 'Enter') {\n        // Custom editors can listen for the event and stop propagation to prevent commit\n        commitEditorChanges();\n        closeEditor();\n      }\n      return;\n    }\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // do not scroll\n      event.preventDefault();\n      return;\n    }\n\n    const column = columns[selectedPosition.idx];\n    column.editorOptions?.onCellKeyDown?.(event);\n    if (event.isDefaultPrevented()) return;\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      onSelectedPositionChange({\n        idx: selectedPosition.idx,\n        rowIdx: selectedPosition.rowIdx,\n        mode: 'EDIT',\n      });\n    }\n  }\n\n  function handleEditorRowChange(row: R, rowIdx: number, commitChanges?: boolean) {\n    if (selectedPosition.mode === 'SELECT') return;\n    if (commitChanges) {\n      updateRow(selectedPosition.rowIdx, row);\n      closeEditor();\n    } else {\n      onSelectedPositionChange(selectedPosition);\n    }\n  }\n\n  function handleOnClose(commitChanges?: boolean) {\n    if (commitChanges) {\n      commitEditorChanges();\n    }\n    closeEditor();\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinViewportBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position, isGroupRow })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: Maybe<boolean>): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    if (enableEditor && isCellEditable(position)) {\n      onSelectedPositionChange({ ...position, mode: 'EDIT' });\n    } else if (\n      selectedPosition.mode !== 'SELECT' ||\n      selectedPosition.idx !== position.idx ||\n      selectedPosition.rowIdx !== position.rowIdx\n    ) {\n      // Avoid re-renders if the selected cell state is the same\n      // TODO: replace with a #record? https://github.com/microsoft/TypeScript/issues/39831\n      onSelectedPositionChange({ ...position, mode: 'SELECT' });\n    }\n  }\n\n  function closeEditor() {\n    if (selectedPosition.mode === 'SELECT') return;\n    onSelectedPositionChange({idx: selectedPosition.idx, rowIdx: selectedPosition.rowIdx, mode: 'SELECT' });\n  }\n\n  function scrollToCell({ idx, rowIdx }: Partial<Position>): void {\n    const { current } = gridRef;\n    if (!current) return;\n\n    if (typeof idx === 'number' && idx > lastFrozenColumnIndex) {\n      rowIdx ??= selectedPosition.rowIdx;\n      if (!(typeof rowIdx !== 'undefined' && isCellWithinSelectionBounds({ rowIdx, idx }))) return;\n      const { clientWidth } = current;\n      const column = columns[idx];\n      const { left, width } = columnMetrics.get(column)!;\n      let right = left + width;\n\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        summaryRows,\n        rowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan !== undefined) {\n        const { left, width } = columnMetrics.get(columns[column.idx + colSpan - 1])!;\n        right = left + width;\n      }\n\n      const isCellAtLeftBoundary = left < scrollLeft + totalFrozenColumnWidth;\n      const isCellAtRightBoundary = right > clientWidth + scrollLeft;\n      if (isCellAtLeftBoundary) {\n        current.scrollLeft = left - totalFrozenColumnWidth;\n      } else if (isCellAtRightBoundary) {\n        current.scrollLeft = right - clientWidth;\n      }\n    }\n\n    if (typeof rowIdx === 'number' && isRowIdxWithinViewportBounds(rowIdx)) {\n      const rowTop = getRowTop(rowIdx);\n      const rowHeight = getRowHeight(rowIdx);\n      if (rowTop < scrollTop) {\n        // at top boundary, scroll to the row's top\n        current.scrollTop = rowTop;\n      } else if (rowTop + rowHeight > scrollTop + clientHeight) {\n        // at bottom boundary, scroll the next row's top to the bottom of the viewport\n        current.scrollTop = rowTop + rowHeight - clientHeight;\n      }\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (\n      key === 'ArrowLeft' &&\n      isRowSelected &&\n      isGroupRow(row) &&\n      !row.isExpanded &&\n      row.level !== 0\n    ) {\n      let parentRowIdx = -1;\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n      if (parentRowIdx !== -1) {\n        return { idx, rowIdx: parentRowIdx };\n      }\n    }\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case 'ArrowLeft':\n        return { idx: idx - 1, rowIdx };\n      case 'ArrowRight':\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: 0 };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: rows.length - 1 };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (selectedPosition.mode === 'EDIT') {\n      const onNavigation =\n        columns[selectedPosition.idx].editorOptions?.onNavigation ?? onEditorNavigation;\n      if (!onNavigation(event)) return;\n    }\n    const { key, shiftKey } = event;\n    let mode = cellNavigationMode;\n    if (key === 'Tab') {\n      // If we are in a position to leave the grid, stop editing but stay in that cell\n      if (\n        canExitGrid({\n          shiftKey,\n          cellNavigationMode,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      mode = cellNavigationMode === 'NONE' ? 'CHANGE_ROW' : cellNavigationMode;\n    }\n\n    // Do not allow focus to leave\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (\n      nextPosition.rowIdx === selectedPosition.rowIdx &&\n      nextPosition.idx === selectedPosition.idx\n    ) {\n      return;\n    }\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      columns,\n      colSpanColumns,\n      rows,\n      summaryRows,\n      minRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode: mode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds,\n      isGroupRow\n    });\n\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getDragHandle(rowIdx: number) {\n    if (\n      selectedPosition.rowIdx !== rowIdx ||\n      selectedPosition.mode === 'EDIT' ||\n      hasGroups || // drag fill is not supported when grouping is enabled\n      onFill == null\n    ) {\n      return;\n    }\n\n    return (\n      <DragHandle\n        rows={rawRows}\n        columns={columns}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx } = selectedPosition;\n    const column = columns[idx];\n    const row = rawRows[getRawRowIdx(rowIdx)];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        onRowChange={handleEditorRowChange}\n        onClose={handleOnClose}\n      />\n    );\n  }\n\n  function getViewportRows() {\n    const rowElements = [];\n    let startRowIndex = 0;\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = columns[selectedIdx];\n      // selectedIdx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else if (selectedRowIdx === rowIdx && !viewportColumns.includes(selectedColumn)) {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns =\n            selectedIdx > viewportColumns[viewportColumns.length - 1].idx\n              ? [...viewportColumns, selectedColumn]\n              : [\n                  ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n                  selectedColumn,\n                  ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n                ];\n        }\n      }\n\n      const row = rows[rowIdx];\n      const top = getRowTop(rowIdx) + headerRowHeight;\n      if (isGroupRow(row)) {\n        ({ startRowIndex } = row);\n        const isGroupRowSelected =\n          isSelectable && row.childRows.every((cr) => selectedRows.has(rowKeyGetter!(cr)));\n        rowElements.push(\n          <GroupRowRenderer\n            aria-level={row.level + 1} // aria-level is 1-based\n            aria-setsize={row.setSize}\n            aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n            aria-rowindex={headerRowsCount + startRowIndex + 1} // aria-rowindex is 1 based\n            aria-selected={isSelectable ? isGroupRowSelected : undefined}\n            key={row.id}\n            id={row.id}\n            groupKey={row.groupKey}\n            viewportColumns={rowColumns}\n            childRows={row.childRows}\n            rowIdx={rowIdx}\n            row={row}\n            top={top}\n            height={getRowHeight(rowIdx)}\n            level={row.level}\n            isExpanded={row.isExpanded}\n            selectedCellIdx={selectedRowIdx === rowIdx ? selectedIdx : undefined}\n            isRowSelected={isGroupRowSelected}\n            selectGroup={selectGroupLatest}\n            toggleGroup={toggleGroupLatest}\n          />\n        );\n        continue;\n      }\n\n      startRowIndex++;\n      let key;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      } else {\n        key = hasGroups ? startRowIndex : rowIdx;\n      }\n\n      rowElements.push(\n        // PW: edited here, call as a function instead to avoid making a new react element every render\n        RowRenderer({\n          \"aria-rowindex\": headerRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1, // aria-rowindex is 1 based\n          \"aria-selected\": isSelectable ? isRowSelected : undefined,\n          key: key,\n          rowIdx: rowIdx,\n          row: row,\n          viewportColumns: rowColumns,\n          isRowSelected: isRowSelected,\n          onRowClick: onRowClick,\n          onRowDoubleClick: onRowDoubleClick,\n          rowClass: rowClass,\n          top: top,\n          height: getRowHeight(rowIdx),\n          copiedCellIdx:\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined\n          ,\n          selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n          draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n          setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\n          lastFrozenColumnIndex: lastFrozenColumnIndex,\n          onRowChange: handleFormatterRowChangeLatest,\n          selectCell: selectViewportCellLatest,\n          selectedCellDragHandle: getDragHandle(rowIdx),\n          selectedCellEditor: getCellEditor(rowIdx),\n        })\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    onSelectedPositionChange(initialPosition);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  return (\n      // If activeRef.current is true, any rendering will autofocus on the selected cell\n      <ActiveContext.Provider value={activeRef}>\n        <div\n            role={hasGroups ? 'treegrid' : 'grid'}\n            aria-label={ariaLabel}\n            aria-labelledby={ariaLabelledBy}\n            aria-describedby={ariaDescribedBy}\n            aria-multiselectable={isSelectable ? true : undefined}\n            aria-colcount={columns.length}\n            aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\n            className={clsx(rootClassname, {[viewportDraggingClassname]: isDragging}, className)}\n            style={\n              {\n                ...style,\n                '--header-row-height': `${headerRowHeight}px`,\n                '--row-width': `${totalColumnWidth}px`,\n                '--summary-row-height': `${summaryRowHeight}px`,\n                ...layoutCssVars\n              } as unknown as React.CSSProperties\n            }\n            ref={gridRef}\n            onScroll={handleScroll}\n            onKeyDown={handleKeyDown}\n            data-testid={testId}\n        >\n          <HeaderRow\n              columns={viewportColumns}\n              onColumnResize={handleColumnResize}\n              allRowsSelected={allRowsSelected}\n              onAllRowsSelectionChange={selectAllRowsLatest}\n              sortColumns={sortColumns}\n              onSortColumnsChange={onSortColumnsChange}\n              lastFrozenColumnIndex={lastFrozenColumnIndex}\n              selectedCellIdx={isHeaderRowSelected ? selectedPosition.idx : undefined}\n              selectCell={selectHeaderCellLatest}\n              shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n          />\n          {rows.length === 0 && noRowsFallback ? (\n              noRowsFallback\n          ) : (\n              <>\n                <div style={{height: max(totalRowHeight, clientHeight)}}/>\n                <RowSelectionChangeProvider value={selectRowLatest}>\n                  {getViewportRows()}\n                </RowSelectionChangeProvider>\n                {summaryRows?.map((row, rowIdx) => {\n                  const isSummaryRowSelected =\n                      selectedPosition.rowIdx === headerRowsCount + rows.length + rowIdx - 1;\n                  return (\n                      <SummaryRow\n                          aria-rowindex={headerRowsCount + rowsCount + rowIdx + 1}\n                          key={rowIdx}\n                          rowIdx={rowIdx}\n                          row={row}\n                          bottom={summaryRowHeight * (summaryRows.length - 1 - rowIdx)}\n                          viewportColumns={viewportColumns}\n                          lastFrozenColumnIndex={lastFrozenColumnIndex}\n                          selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                          selectCell={selectSummaryCellLatest}\n                      />\n                  );\n                })}\n              </>\n          )}\n        </div>\n      </ActiveContext.Provider>\n  );\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: DataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n","import React from 'react';\nimport { css } from '@linaria/core';\nimport type { EditorProps } from '../types';\n\nconst textEditor = css`\n  appearance: none;\n\n  box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n  padding: 0px 6px 0 6px;\n  border: 2px solid #ccc;\n  vertical-align: top;\n  color: var(--color);\n  background-color: var(--background-color);\n\n  font-family: inherit;\n  font-size: var(--font-size);\n\n  &:focus {\n    border-color: var(--selection-color);\n    outline: none;\n  }\n\n  &::placeholder {\n    color: #999;\n    opacity: 1;\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditor}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function TextEditor<TRow, TSummaryRow>({\n  row,\n  rowIdx,\n  column,\n  onRowChange,\n  onClose\n}: EditorProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value }, rowIdx)}\n      onBlur={() => onClose(true)}\n    />\n  );\n}\n","function _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nexport { _extends as default };","function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f);else for(t in e)e[t]&&(n&&(n+=\" \"),n+=t);return n}export function clsx(){for(var e,t,f=0,n=\"\";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;"],"names":["cell","cellClassname","cellFrozen","cellFrozenClassname","cellFrozenLast","cellFrozenLastClassname","root","rootClassname","viewportDragging","viewportDraggingClassname","row","rowClassname","useLayoutEffect","window","useEffect","useOriginalLayoutEffect","ActiveContext","React","createContext","current","displayName","useActiveElement","gridRef","activeRef","useRef","document","activeElement","handleFocusIn","handleFocusOut","gridElement","addEventListener","removeEventListener","useFocusRef","isSelected","ref","useContext","_ref$current","focus","preventScroll","tabIndex","checkboxLabel","checkboxLabelClassname","checkboxInput","checkboxInputClassname","checkbox","checkboxClassname","checkboxLabelDisabled","checkboxLabelDisabledClassname","SelectCellFormatter","value","isCellSelected","disabled","onClick","onChange","ariaLabel","ariaLabelledBy","handleChange","e","target","checked","nativeEvent","shiftKey","createElement","className","clsx","type","ValueFormatter","props","Fragment","column","key","groupCellContent","groupCellContentClassname","caret","caretClassname","ToggleGroupFormatter","groupKey","isExpanded","toggleGroup","handleKeyDown","d","onKeyDown","viewBox","width","height","RowSelectionContext","undefined","RowSelectionProvider","Provider","RowSelectionChangeContext","RowSelectionChangeProvider","useRowSelection","rowSelectionContext","rowSelectionChangeContext","Error","getColSpan","lastFrozenColumnIndex","args","colSpan","Number","isInteger","frozen","idx","stopPropagation","event","nonInputKeys","Set","isCtrlKeyHeldDown","ctrlKey","metaKey","isDefaultCellInput","has","onEditorNavigation","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","matches","isSelectedCellEditable","selectedPosition","columns","rows","isGroupRow","rowIdx","isCellEditable","editor","rowGroup","editable","getSelectedCellColSpan","summaryRows","length","getNextSelectedCellPosition","cellNavigationMode","colSpanColumns","minRowIdx","maxRowIdx","currentPosition","currentIdx","nextPosition","isCellWithinBounds","nextIdx","nextRowIdx","setColSpan","moveRight","colIdx","columnsCount","isAfterLastColumn","isBeforeFirstColumn","isLastRow","isFirstRow","canExitGrid","maxColIdx","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","min","max","floor","sign","Math","assertIsValidKeyGetter","keyGetter","getCellStyle","gridColumnStart","gridColumnEnd","left","getCellClassname","extraClasses","isLastFrozenColumn","SELECT_COLUMN_KEY","SelectFormatter","isRowSelected","onRowSelectionChange","isShiftClick","SelectGroupFormatter","SelectColumn","name","maxWidth","resizable","sortable","headerRenderer","allRowsSelected","onAllRowsSelectionChange","formatter","groupFormatter","useCalculatedColumns","rawColumns","columnWidths","viewportWidth","scrollLeft","defaultColumnOptions","rawGroupBy","enableVirtualization","_defaultColumnOptions","_defaultColumnOptions2","_defaultColumnOptions3","_defaultColumnOptions4","minColumnWidth","minWidth","defaultFormatter","defaultSortable","defaultResizable","groupBy","useMemo","map","rawColumn","_rawGroupBy$includes","_rawColumn$sortable","_rawColumn$resizable","_rawColumn$formatter","includes","sort","aKey","frozenA","bKey","frozenB","indexOf","forEach","push","layoutCssVars","totalColumnWidth","totalFrozenColumnWidth","columnMetrics","Map","templateColumns","allocatedWidth","unassignedColumnsCount","getSpecifiedWidth","clampColumnWidth","set","unallocatedWidth","unallocatedColumnWidth","columnMetric","get","i","colOverscanStartIdx","colOverscanEndIdx","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","test","parseInt","useGridDimensions","gridWidth","setGridWidth","useState","gridHeight","setGridHeight","ResizeObserver","resizeObserver","clientWidth","clientHeight","devicePixelRatio","observe","disconnect","useLatestFunc","fn","useCallback","useRovingCellRef","isChildFocused","forceRender","onFocus","isFocused","rowSelected","rowSelectedClassname","useRovingRowRef","selectedCellIdx","useViewportColumns","rowOverscanStartIdx","rowOverscanEndIdx","startIdx","updateStartIdx","viewportColumns","isReadonlyArray","arr","Array","isArray","useViewportRows","rawRows","rowHeight","scrollTop","rowGrouper","expandedGroupIds","groupedRows","rowsCount","groupRows","groupByKey","remainingGroupByKeys","startRowIndex","groupRowsCount","groups","childRows","Object","entries","childGroups","childRowsCount","allGroupRows","flattenedRows","expandGroup","parentId","level","keys","posInSet","_expandedGroupIds$has","id","groupRow","setSize","add","totalRowHeight","getRowTop","getRowHeight","findRowIdx","offset","rowPositions","currentRowHeight","position","top","validateRowIdx","start","end","middle","currentOffset","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","headerSortCell","headerSortCellClassname","headerSortName","headerSortNameClassname","arrow","arrowClassname","SortableHeaderCell","onSort","sortDirection","priority","children","preventDefault","handleClick","cellResizable","cellResizableClassname","HeaderCell","onColumnResize","sortColumns","onSortColumnsChange","selectCell","shouldFocusGrid","sortIndex","findIndex","columnKey","sortColumn","direction","ariaSort","headerCellClass","onPointerDown","pointerType","buttons","currentTarget","pointerId","right","getBoundingClientRect","clientX","onPointerMove","onLostPointerCapture","setPointerCapture","ctrlClick","sortDescendingFirst","nextSort","nextSortColumn","nextSortColumns","splice","handleFocus","getCell","role","style","headerRow","headerRowClassname","HeaderRow","cells","index","memo","cellCopied","cellCopiedClassname","cellDraggedOver","cellDraggedOverClassname","Cell","isCopied","isDraggedOver","dragHandle","onRowClick","onRowDoubleClick","onRowChange","cellClass","selectCellWrapper","openEditor","_column$editorOptions","editorOptions","editOnClick","handleContextMenu","handleDoubleClick","_extends","onDoubleClick","onContextMenu","Row","copiedCellIdx","draggedOverCellIdx","selectedCellEditor","selectedCellDragHandle","rowClass","setDraggedOverRowIdx","onMouseEnter","rovingClassName","handleRowChange","newRow","handleDragEnter","RowWithRef","forwardRef","GroupCell","groupColumnIndex","toggleGroupWrapper","isLevelMatching","cursor","groupRowClassname","GroupedRow","selectGroup","handleSelectGroup","SummaryCell","summaryFormatter","SummaryFormatter","summaryCellClass","summaryRow","summaryRowBorderClassname","summaryRowClassname","SummaryRow","bottom","ariaRowIndex","cellEditing","EditCell","onClose","_column$editorOptions2","_column$editorOptions3","frameRequestRef","commitOnOutsideClick","commitOnOutsideMouseDown","cancelFrameRequest","cancelAnimationFrame","onWindowCaptureMouseDown","requestAnimationFrame","capture","renderFormatter","onMouseDownCapture","cellDragHandle","cellDragHandleClassname","DragHandle","latestDraggedOverRowIdx","onRowsChange","onFill","setDragging","handleMouseDown","onMouseOver","onMouseUp","handleDragEnd","overRowIdx","endRowIndex","updateRows","startRowIdx","endRowIdx","sourceRow","updatedRows","indexes","updatedRow","targetRow","onMouseDown","initialPosition","mode","DataGrid","rowKeyGetter","headerRowHeight","rawHeaderRowHeight","summaryRowHeight","rawSummaryRowHeight","selectedRows","onSelectedRowsChange","onExpandedGroupIdsChange","onSelectedPositionChange","onScroll","onPaste","rawCellNavigationMode","rowRenderer","noRowsFallback","ariaDescribedBy","testId","_summaryRows$length","RowRenderer","setScrollTop","setScrollLeft","setColumnWidths","copiedCell","setCopiedCell","isDragging","draggedOverRowIdx","setOverRowIdx","prevSelectedPosition","lastSelectedRowIdx","headerRowsCount","summaryRowsCount","isSelectable","isHeaderRowSelected","size","every","hasGroups","minColIdx","selectedCellIsWithinSelectionBounds","isCellWithinSelectionBounds","selectedCellIsWithinViewportBounds","isCellWithinViewportBounds","selectRowLatest","selectRow","selectAllRowsLatest","selectAllRows","handleFormatterRowChangeLatest","updateRow","selectViewportCellLatest","enableEditor","selectGroupLatest","selectHeaderCellLatest","selectSummaryCellLatest","toggleGroupLatest","scrollToCell","useImperativeHandle","element","scrollToColumn","scrollToRow","scrollTo","behavior","handleColumnResize","newColumnWidths","newSelectedRows","childRow","rowKey","delete","previousRowIdx","step","expandedGroupId","newExpandedGroupIds","Element","isCellEvent","closest","isRowEvent","keyCode","cKey","vKey","handleCopy","handlePaste","isRowIdxWithinViewportBounds","closeEditor","navigate","handleCellInput","handleScroll","getRawRowIdx","rawRowIdx","commitEditorChanges","_columns$selectedPosi","updatedTargetRow","sourceColumnKey","targetColumnKey","onCellKeyDown","call","isDefaultPrevented","handleEditorRowChange","commitChanges","handleOnClose","isColIdxWithinSelectionBounds","isCellAtLeftBoundary","isCellAtRightBoundary","rowTop","getNextPosition","parentRowIdx","parentRow","nextRowY","_columns$selectedPosi2","_columns$selectedPosi3","onNavigation","nextSelectedCellPosition","getDraggedOverCellIdx","currentRowIdx","getDragHandle","getCellEditor","getViewportRows","rowElements","selectedIdx","selectedRowIdx","viewportRowIdx","isRowOutsideViewport","rowColumns","selectedColumn","slice","isGroupRowSelected","cr","GroupRowRenderer","_selectedRows$has","c","isSummaryRowSelected","textEditor","textEditorClassname","autoFocusAndSelect","input","select","TextEditor","onBlur"],"sourceRoot":""}